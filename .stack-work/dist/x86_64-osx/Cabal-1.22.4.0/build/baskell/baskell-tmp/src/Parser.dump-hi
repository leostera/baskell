
==================== FINAL INTERFACE ====================
2016-06-16 17:13:29.608555 UTC

interface main@main:Parser 7102
  interface hash: 96020dc53d6166fd6804781359ea1419
  ABI hash: 83aa8d78fd23f7792bae350f21833ecb
  export-list hash: c423f29aac2809d2be83d79fe610caa7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ef88e91a8a68b8e3094c52e6194a9bf9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.parse
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      parsec-3.1.9@parse_AqYX0bfDxT5E4cHIEfeJIN
                      text-1.2.2.0@text_BKzOMwCPkuv5n8xwLM3CQG
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         text-1.2.2.0@text_BKzOMwCPkuv5n8xwLM3CQG:Data.Text
         text-1.2.2.0@text_BKzOMwCPkuv5n8xwLM3CQG:Data.Text.Lazy
         text-1.2.2.0@text_BKzOMwCPkuv5n8xwLM3CQG:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.2.0@text_BKzOMwCPkuv5n8xwLM3CQG:Data.Text
                         text-1.2.2.0@text_BKzOMwCPkuv5n8xwLM3CQG:Data.Text.Lazy
import  -/  base-4.8.1.0:Data.Either bc9482e78cc431fce439b593377aa2e6
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:Text.Read 30509137a501bd56d136aca29a7a35a6
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  parsec-3.1.9@parse_AqYX0bfDxT5E4cHIEfeJIN:Text.Parsec 62d3f0d9c1f71a7502aa78aa832869b3
import  -/  parsec-3.1.9@parse_AqYX0bfDxT5E4cHIEfeJIN:Text.Parsec.Char 46ffcc6b27d5dd082e148523c1bf8205
import  -/  parsec-3.1.9@parse_AqYX0bfDxT5E4cHIEfeJIN:Text.Parsec.Combinator 551e37df9bb1992d1c5660221b3d02fe
import  -/  parsec-3.1.9@parse_AqYX0bfDxT5E4cHIEfeJIN:Text.Parsec.Error 1e9f9f52fa127a11b5b291cae74c57ab
import  -/  parsec-3.1.9@parse_AqYX0bfDxT5E4cHIEfeJIN:Text.Parsec.Prim 5efb56bce2436697e7b0d1fbc83c9f22
import  -/  parsec-3.1.9@parse_AqYX0bfDxT5E4cHIEfeJIN:Text.Parsec.String dd1655665052e9962dba7f1b07de94ba
b1730a05019dd34785c35f2e93293385
  $fShowExpression :: GHC.Show.Show Parser.Expression
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Expression
                  Parser.$fShowExpression_$cshowsPrec
                  Parser.$fShowExpression_$cshow
                  Parser.$fShowExpression_$cshowList -}
b1730a05019dd34785c35f2e93293385
  $fShowExpression1 :: Parser.Expression -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Parser.Expression w1 :: GHC.Base.String ->
                 case w of ww { Parser.Print ww1 ->
                 Parser.$w$cshowsPrec 0 ww1 w1 }) -}
cf303b9392444748897380ca261200d8
  $fShowExpression2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Print "#) -}
b1730a05019dd34785c35f2e93293385
  $fShowExpression_$cshow :: Parser.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Parser.Expression ->
                 Parser.$fShowExpression_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b1730a05019dd34785c35f2e93293385
  $fShowExpression_$cshowList ::
    [Parser.Expression] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Parser.Expression
                   Parser.$fShowExpression1) -}
b1730a05019dd34785c35f2e93293385
  $fShowExpression_$cshowsPrec ::
    GHC.Types.Int -> Parser.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Parser.Expression
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Parser.Print ww3 ->
                 Parser.$w$cshowsPrec ww1 ww3 w2 } }) -}
e24a451f3f65beb2e29ceb90c6605ed9
  $fShowInstruction :: GHC.Show.Show Parser.Instruction
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Instruction
                  Parser.$fShowInstruction_$cshowsPrec
                  Parser.$fShowInstruction_$cshow
                  Parser.$fShowInstruction_$cshowList -}
e24a451f3f65beb2e29ceb90c6605ed9
  $fShowInstruction1 :: Parser.Instruction -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Parser.Instruction w1 :: GHC.Base.String ->
                 case w of ww { Parser.Line ww1 ww2 ->
                 Parser.$w$cshowsPrec1 0 ww1 ww2 w1 }) -}
bd388ee677ad2d7cebcbde637ffa4a41
  $fShowInstruction2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Line "#) -}
e24a451f3f65beb2e29ceb90c6605ed9
  $fShowInstruction_$cshow :: Parser.Instruction -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Parser.Instruction ->
                 Parser.$fShowInstruction_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e24a451f3f65beb2e29ceb90c6605ed9
  $fShowInstruction_$cshowList ::
    [Parser.Instruction] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Parser.Instruction
                   Parser.$fShowInstruction1) -}
e24a451f3f65beb2e29ceb90c6605ed9
  $fShowInstruction_$cshowsPrec ::
    GHC.Types.Int -> Parser.Instruction -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(U),1*U(1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Parser.Instruction
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Parser.Line ww3 ww4 ->
                 Parser.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
c58391328fd22593f919e5720515a82b
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Parser.$fShowExpression2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Parser.$fShowExpression2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
65d72118332c95ba75cc535fae299d8d
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Parser.Expression
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U(U)><L,1*U(1*U)><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Types.Int
                   ww2 :: Parser.Expression
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Parser.$fShowInstruction2
                        (case ww1 of ww3 { GHC.Types.I# ww4 ->
                         case GHC.Show.$wshowSignedInt
                                11
                                ww4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case ww2 of ww5 { Parser.Print ww6 ->
                                    Parser.$w$cshowsPrec 11 ww6 w })) of ww5 { (#,#) ww6 ww7 ->
                         GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Parser.$fShowInstruction2
                           (case ww1 of ww3 { GHC.Types.I# ww4 ->
                            case GHC.Show.$wshowSignedInt
                                   11
                                   ww4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (case ww2 of ww5 { Parser.Print ww6 ->
                                       Parser.$w$cshowsPrec
                                         11
                                         ww6
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            w) })) of ww5 { (#,#) ww6 ww7 ->
                            GHC.Types.: @ GHC.Types.Char ww6 ww7 } })) }) -}
b1730a05019dd34785c35f2e93293385
  data Expression = Print GHC.Base.String
e24a451f3f65beb2e29ceb90c6605ed9
  data Instruction = Line GHC.Types.Int Parser.Expression
fc2c86c99c990ac47619ec64e747c873
  parse ::
    GHC.Base.String
    -> Data.Either.Either
         Text.Parsec.Error.ParseError Parser.Instruction
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.parse1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.NTCo:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError Parser.Instruction>_R) -}
17f0266dc44e277ed2a578754f5437ab
  parse1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            Text.Parsec.Error.ParseError Parser.Instruction)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s1 :: GHC.Base.String ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Parser.Instruction
                   @ GHC.Types.Char
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   Parser.parse2
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.Instruction>_R))
                   GHC.Tuple.()
                   (GHC.Types.[] @ GHC.Types.Char)
                   s1) -}
72351bd81d467322aed7254defa04e2b
  parse2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Instruction
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Instruction
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: Parser.Instruction
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Parser.Instruction
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.many3
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Parser.parse4
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   eta
                   (\ x :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Parser.parse3
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: Parser.Instruction
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Parser.parse3
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: Parser.Instruction
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
faecc04170556cf725440f6b52bc8c13
  parse3 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Parser.Instruction
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Parser.Instruction
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
7c22d50573c8a3f834d852492c6e7a2a
  parse4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   eta :: Text.Parsec.Prim.State GHC.Base.String ()
                   eta1 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta3 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Parser.parse6
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Parser.parse5
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
71641ef14c000b10800ce92368eed56e
  parse5 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.digit2
                   (GHC.Types.[] @ GHC.Base.String)) -}
f5c66946b01c755f9ed94b320d9b91d4
  parse6 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   w2 :: Text.Parsec.Prim.State GHC.Base.String ()[OneShot]
                   w3 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w5 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w6 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wa
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isDigit
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
instance GHC.Show.Show [Parser.Expression]
  = Parser.$fShowExpression
instance GHC.Show.Show [Parser.Instruction]
  = Parser.$fShowInstruction
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

